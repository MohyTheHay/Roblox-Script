--[[
    [Fixed]
    - When Turning Toggle Off, instead of turning the "flag" nil, will turn it false;
    - Made it where it returns "Section" So you could change its properties; (Same with Label);
    - Fixed where :Label, wouldnt be in the order supposed to be
    [Added]
    + Added where you can add TextLabels (Including Sections) and TextButtons to rainbow; (Changes TextColor3)
    + Added where you can set Dropdown to a selected one or does 1st selection in list provided;
    + Added where you change ToggleDisplay between Color Fill or CheckMark, library.options.toggledisplay = 'Fill' or 'Check';
    + Added a Drop Section;
    + Added Box for Slider; (Type in number)
    
]]

local library = {count = 0, queue = {}, callbacks = {}, rainbowtable = {}, toggled = true, binds = {}};
    local defaults; do
        local dragger = {}; do
            local mouse        = game:GetService("Players").LocalPlayer:GetMouse();
            local inputService = game:GetService('UserInputService');
            local heartbeat    = game:GetService("RunService").Heartbeat;
            -- // credits to Ririchi / Inori for this cute drag function :)
            function dragger.new(frame)
                local s, event = pcall(function()
                    return frame.MouseEnter
                end)
        
                if s then
                    frame.Active = true;
                    
                    event:connect(function()
                        local input = frame.InputBegan:connect(function(key)
                            if key.UserInputType == Enum.UserInputType.MouseButton1 then
                                local objectPosition = Vector2.new(mouse.X - frame.AbsolutePosition.X, mouse.Y - frame.AbsolutePosition.Y);
                                while heartbeat:wait() and inputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                                    pcall(function()
                                        frame:TweenPosition(UDim2.new(0, mouse.X - objectPosition.X + (frame.Size.X.Offset * frame.AnchorPoint.X), 0, mouse.Y - objectPosition.Y + (frame.Size.Y.Offset * frame.AnchorPoint.Y)), 'Out', 'Linear', 0.1, true);
                                    end)
                                end
                            end
                        end)
        
                        local leave;
                        leave = frame.MouseLeave:connect(function()
                            input:disconnect();
                            leave:disconnect();
                        end)
                    end)
                end
            end
    
            game:GetService('UserInputService').InputBegan:connect(function(key, gpe)
                if (not gpe) then
                    if key.KeyCode == Enum.KeyCode.RightControl then
                        library.toggled = not library.toggled;
                        for i, data in next, library.queue do
                            local pos = (library.toggled and data.p or UDim2.new(-1, 0, -0.5,0))
                            data.w:TweenPosition(pos, (library.toggled and 'Out' or 'In'), 'Quad', 0.15, true)
                            wait();
                        end
                    end
                end
            end)
        end
        
        local types = {}; do
            types.__index = types;
            function types.window(name, options)
                library.count = library.count + 1
                local newWindow = library:Create('Frame', {
                    Name = name;
                    Size = UDim2.new(0, 190, 0, 30);
                    BackgroundColor3 = options.topcolor;
                    BorderSizePixel = 0;
                    Parent = library.container;
                    Position = UDim2.new(0, (15 + (200 * library.count) - 200), 0, 0);
                    ZIndex = 3;
                    library:Create('TextLabel', {
                        Text = name;
                        Size = UDim2.new(1, -10, 1, 0);
                        Position = UDim2.new(0, 5, 0, 0);
                        BackgroundTransparency = 1;
                        Font = Enum.Font.Code;
                        TextSize = options.titlesize;
                        Font = options.titlefont;
                        TextColor3 = options.titletextcolor;
                        TextStrokeTransparency = library.options.titlestroke;
                        TextStrokeColor3 = library.options.titlestrokecolor;
                        ZIndex = 3;
                    });
                    library:Create("TextButton", {
                        Size = UDim2.new(0, 30, 0, 30);
                        Position = UDim2.new(1, -35, 0, 0);
                        BackgroundTransparency = 1;
                        Text = "-";
                        TextSize = options.titlesize;
                        Font = options.titlefont;--Enum.Font.Code;
                        Name = 'window_toggle';
                        TextColor3 = options.titletextcolor;
                        TextStrokeTransparency = library.options.titlestroke;
                        TextStrokeColor3 = library.options.titlestrokecolor;
                        ZIndex = 3;
                    });
                    library:Create("Frame", {
                        Name = 'Underline';
                        Size = UDim2.new(1, 0, 0, 2);
                        Position = UDim2.new(0, 0, 1, -2);
                        BackgroundColor3 = (options.underlinecolor ~= "rainbow" and options.underlinecolor or Color3.new());
                        BorderSizePixel = 0;
                        ZIndex = 3;
                    });
                    library:Create('Frame', {
                        Name = 'container';
                        Position = UDim2.new(0, 0, 1, 0);
                        Size = UDim2.new(1, 0, 0, 0);
                        BorderSizePixel = 0;
                        BackgroundColor3 = options.bgcolor;
                        ClipsDescendants = false;
                        library:Create('UIListLayout', {
                            Name = 'List';
                            SortOrder = Enum.SortOrder.LayoutOrder;
                        })
                    });
                })
                
                if options.underlinecolor == "rainbow" then
                    library.rainbowtable[newWindow:FindFirstChild('Underline')] = newWindow:FindFirstChild('Underline')
                end
    
                local window = setmetatable({
                    count = 0;
                    object = newWindow;
                    container = newWindow.container;
                    toggled = true;
                    flags   = {};
    
                }, types)
    
                table.insert(library.queue, {
                    w = window.object;
                    p = window.object.Position;
                })
    
                newWindow:FindFirstChild("window_toggle").MouseButton1Click:connect(function()
                    window.toggled = not window.toggled;
                    newWindow:FindFirstChild("window_toggle").Text = (window.toggled and "+" or "-")
                    if (not window.toggled) then
                        window.container.ClipsDescendants = true;
                    end
                    wait();
                    local y = 0;
                    for i, v in next, window.container:GetChildren() do
                        if (not v:IsA('UIListLayout')) then
                            y = y + v.AbsoluteSize.Y;
                        end
                    end 
    
                    local targetSize = window.toggled and UDim2.new(1, 0, 0, y+5) or UDim2.new(1, 0, 0, 0);
                    local targetDirection = window.toggled and "In" or "Out"
    
                    window.container:TweenSize(targetSize, targetDirection, "Quad", 0.15, true)
                    wait(.15)
                    if window.toggled then
                        window.container.ClipsDescendants = false;
                    end
                end)
    
                return window;
            end
            
            function types:Resize()
                local y = 0;
                for i, v in next, self.container:GetChildren() do
                    if (not v:IsA('UIListLayout')) then
                        y = y + v.AbsoluteSize.Y;
                    end
                end 
                self.container.Size = UDim2.new(1, 0, 0, y+5)
            end
            
            function types:GetOrder() 
                local c = 0;
                for i, v in next, self.container:GetChildren() do
                    if (not v:IsA('UIListLayout')) then
                        c = c + 1
                    end
                end
                return c
            end
            
            function types:Label(display,rainbow)
                local v = game:GetService'TextService':GetTextSize(display, 18, Enum.Font.SourceSans, Vector2.new(math.huge, math.huge))
                local object = library:Create('Frame', {
                    Size = UDim2.new(1, 0, 0, v.Y+5);
                    BackgroundTransparency  = 1;
                    LayoutOrder = self:GetOrder();
                    library:Create('TextLabel', {
                    
                        Position = UDim2.new(0, 10, 0, 0);
                        Size = UDim2.new(1, 0, 1, 0);
                        TextSize = 18;
                        Font = Enum.Font.SourceSans;
                        TextColor3 = Color3.fromRGB(255, 255, 255);
                        BackgroundTransparency = 1;
                        TextXAlignment = Enum.TextXAlignment.Left;
                        TextWrapped = true;
                        Text = display;
                    });
                    Parent = self.container;
                })

                self:Resize();
                if rainbow then
                    library.rainbowtable[object:FindFirstChild('TextLabel')] = object:FindFirstChild('TextLabel')
                end
                
                return object:FindFirstChild('TextLabel');
            end
    
            function types:Toggle(name, options, callback)
                options = options or {}
                local default  = options.default or false;
                local location = options.location or self.flags;
                local flag     = options.flag or "";
                local callback = callback or function() end;
                
                location[flag] = default;
    
                local check = library:Create('Frame', {
                    BackgroundTransparency = 1;
                    Size = UDim2.new(1, 0, 0, 25);
                    LayoutOrder = self:GetOrder();
                    library:Create('TextLabel', {
                        Name = name;
                        Text = "\r" .. name;
                        BackgroundTransparency = 1;
                        TextColor3 = library.options.textcolor;
                        Position = UDim2.new(0, 5, 0, 0);
                        Size     = UDim2.new(1, -5, 1, 0);
                        TextXAlignment = Enum.TextXAlignment.Left;
                        Font = library.options.font;
                        TextSize = library.options.fontsize;
                        TextStrokeTransparency = library.options.textstroke;
                        TextStrokeColor3 = library.options.strokecolor;
                        library:Create('TextButton', {
                            
                            Text = (library.options.toggledisplay == 'Check' and (location[flag] and utf8.char(10003) or "") or '');
                            Font = library.options.font;
                            TextSize = library.options.fontsize;
                            Name = 'Checkmark';
                            Size = UDim2.new(0, 20, 0, 20);
                            Position = UDim2.new(1, -25, 0, 4);
                            TextColor3 = library.options.textcolor;
                            BackgroundColor3 = (library.options.toggledisplay == 'Fill' and(location[flag] and Color3.fromRGB(20,148,90) or Color3.fromRGB(175,35,35)) or library.options.bgcolor);
                            BorderColor3 = library.options.bordercolor;
                            TextStrokeTransparency = library.options.textstroke;
                            TextStrokeColor3 = library.options.strokecolor;
                        })
                    });
                    Parent = self.container;
                });
                    
                local function click(t)
                    location[flag] = (not location[flag]);
                    callback(location[flag])
                    if library.options.toggledisplay == 'Check' then
                        check:FindFirstChild(name).Checkmark.Text = location[flag] and utf8.char(10003) or "";
                    elseif library.options.toggledisplay == 'Fill' then
                        check:FindFirstChild(name).Checkmark.BackgroundColor3 = location[flag] and Color3.fromRGB(20,148,90) or Color3.fromRGB(175,35,35)
                    end
                end
    
                check:FindFirstChild(name).Checkmark.MouseButton1Click:connect(click)
                library.callbacks[flag] = click;
    
                if location[flag] == true then
                    callback(location[flag])
                end
    
                self:Resize();
                return {
                    Set = function(b)
                        location[flag] = b;
                        callback(location[flag])
                        if library.options.toggledisplay == 'Check' then
                            check:FindFirstChild(name).Checkmark.Text = location[flag] and utf8.char(10003) or "";
                        elseif library.options.toggledisplay == 'Fill' then
                            check:FindFirstChild(name).Checkmark.BackgroundColor3 = location[flag] and Color3.fromRGB(20,148,90) or Color3.fromRGB(175,35,35)
                        end
                    end
                }
            end
            
            function types:Button(name, callback)
                callback = callback or function() end;
                
                local check = library:Create('Frame', {
                    BackgroundTransparency = 1;
                    Size = UDim2.new(1, 0, 0, 25);
                    LayoutOrder = self:GetOrder();
                    library:Create('TextButton', {
                        Name = name;
                        Text = name;
                        BackgroundColor3 = library.options.btncolor;
                        BorderColor3 = library.options.bordercolor;
                        TextStrokeTransparency = library.options.textstroke;
                        TextStrokeColor3 = library.options.strokecolor;
                        TextColor3 = library.options.textcolor;
                        Position = UDim2.new(0, 5, 0, 5);
                        Size     = UDim2.new(1, -10, 0, 20);
                        Font = library.options.font;
                        TextSize = library.options.fontsize;
                    });
                    Parent = self.container;
                });
                
                check:FindFirstChild(name).MouseButton1Click:connect(callback)
                self:Resize();
    
                return check:WaitForChild(name),{
                    Fire = function()
                        callback();
                    end
                }
            end
            
            function types:Box(name, options, callback) --type, default, data, location, flag)
                options = options or {}
                local tipe   = options.type or "";
                local default = options.default or "";
                local data = options.data
                local location = options.location or self.flags;
                local flag     = options.flag or "";
                local callback = callback or function() end;
                local min      = options.min or 0;
                local max      = options.max or 9e9;
    
                if tipe == 'number' and tonumber(default) ~= nil then
                    location[flag] = default;
                else
                    location[flag] = "";
                    default = "";
                end
    
                local check = library:Create('Frame', {
                    BackgroundTransparency = 1;
                    Size = UDim2.new(1, 0, 0, 25);
                    LayoutOrder = self:GetOrder();
                    library:Create('TextLabel', {
                        Name = name;
                        Text = "\r" .. name;
                        BackgroundTransparency = 1;
                        TextColor3 = library.options.textcolor;
                        TextStrokeTransparency = library.options.textstroke;
                        TextStrokeColor3 = library.options.strokecolor;
                        Position = UDim2.new(0, 5, 0, 0);
                        Size     = UDim2.new(1, -5, 1, 0);
                        TextXAlignment = Enum.TextXAlignment.Left;
                        Font = library.options.font;
                        TextSize = library.options.fontsize;
                        library:Create('TextBox', {
                            TextStrokeTransparency = library.options.textstroke;
                            TextStrokeColor3 = library.options.strokecolor;
                            Text = tostring(default);
                            Font = library.options.font;
                            TextSize = library.options.fontsize;
                            Name = 'Box';
                            Size = UDim2.new(0, 60, 0, 20);
                            Position = UDim2.new(1, -65, 0, 3);
                            TextColor3 = library.options.textcolor;
                            BackgroundColor3 = library.options.boxcolor;
                            BorderColor3 = library.options.bordercolor;
                            PlaceholderColor3 = library.options.placeholdercolor;
                        })
                    });
                    Parent = self.container;
                });
            
                local box = check:FindFirstChild(name):FindFirstChild('Box');
                box.FocusLost:connect(function(e)
                    local old = location[flag];
                    if tipe == "number" then
                        local num = tonumber(box.Text)
                        if (not num) then
                            box.Text = tonumber(location[flag])
                        else
                            location[flag] = math.clamp(num, min, max)
                            box.Text = tonumber(location[flag])
                        end
                    else
                        location[flag] = tostring(box.Text)
                    end
    
                    callback(location[flag], old, e)
                end)
                
                if tipe == 'number' then
                    box:GetPropertyChangedSignal('Text'):connect(function()
                        box.Text = string.gsub(box.Text, "[%a+]", "");
                    end)
                end
    
                local function SetNew(new)
                    if tipe == "number" then
                        local num = tonumber(new)
                        if (not num) then
                            box.Text = tonumber(location[flag])
                        else
                            location[flag] = math.clamp(num, min, max)
                            box.Text = tonumber(location[flag])
                        end
                    else
                        location[flag] = tostring(box.Text)
                    end
                end
                
                self:Resize();
                return {
    
